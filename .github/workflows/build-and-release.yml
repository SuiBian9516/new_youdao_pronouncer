name: Build and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'main'
      - 'preview'

permissions:
  contents: write
  discussions: write

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
      - id: check
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* && ${{ github.ref }} != refs/tags/v*-pre* && ${{ github.ref }} != refs/tags/v*-alpha* && ${{ github.ref }} != refs/tags/v*-beta* && ${{ github.ref }} != refs/tags/v*-rc* && ${{ github.ref }} != refs/tags/v*-dev* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == refs/tags/v*-pre* || ${{ github.ref }} == refs/tags/v*-alpha* || ${{ github.ref }} == refs/tags/v*-beta* || ${{ github.ref }} == refs/tags/v*-rc* || ${{ github.ref }} == refs/tags/v*-dev* ]]; then
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == refs/heads/preview || ${{ github.ref }} == refs/heads/main ]]; then
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-conditions
    if: needs.check-conditions.outputs.is_release == 'true' || needs.check-conditions.outputs.is_prerelease == 'true'
    runs-on: windows-latest
    outputs:
      tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Setup Git for HTTPS
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global url."https://".insteadOf "git://"
          git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
        shell: pwsh

      - name: Configure Yarn
        run: |
          yarn config set network-timeout 300000
          yarn config set registry https://registry.npmjs.org/
          yarn config set npmRegistryServer https://registry.npmjs.org/
          yarn config set unsafeHttpWhitelist "*"

      - name: Install dependencies with HTTPS
        run: yarn install --frozen-lockfile --network-timeout 300000
        env:
          GIT_SSH_COMMAND: "echo skipping ssh"
          npm_config_registry: "https://registry.npmjs.org/"
          YARN_REGISTRY: "https://registry.npmjs.org/"
          USE_HTTPS: "true"

      - name: Build application
        run: yarn build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          
      # 如果是普通分支提交（无标签），则创建自动标签
      - name: Generate version for branch
        if: needs.check-conditions.outputs.is_prerelease == 'true' && (startsWith(github.ref, 'refs/heads/preview') || startsWith(github.ref, 'refs/heads/main'))
        id: generate_version
        run: |
          $BRANCH_NAME = "${{ github.ref_name }}"
          $DATE_TAG = Get-Date -Format "yyyyMMdd-HHmmss"
          $AUTO_TAG = "v0.0.0-$BRANCH_NAME-$DATE_TAG"
          echo "AUTO_TAG=$AUTO_TAG" >> $env:GITHUB_OUTPUT
          git tag $AUTO_TAG
          git push origin $AUTO_TAG
        shell: pwsh

      - name: Extract version from tag
        id: get_version
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/")) {
            $TAG_NAME="${{ github.ref_name }}"
          } else {
            $TAG_NAME="${{ steps.generate_version.outputs.AUTO_TAG }}"
          }
          $VERSION=$TAG_NAME.TrimStart('v')
          echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
          echo "TAG_NAME=$TAG_NAME" >> $env:GITHUB_OUTPUT
        shell: pwsh
        
      # 上传构建产物，供后续任务使用
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm

  release:
    needs: [check-conditions, build]
    if: needs.check-conditions.outputs.is_release == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist
          
      - name: Check for CHANGELOG.md
        id: check_changelog
        run: |
          if (Test-Path "CHANGELOG.md") {
            echo "EXISTS=true" >> $env:GITHUB_OUTPUT
            $content = Get-Content -Path "CHANGELOG.md" -Raw
            echo "CHANGELOG_CONTENT<<EOF" >> $env:GITHUB_OUTPUT
            echo "$content" >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          } else {
            echo "EXISTS=false" >> $env:GITHUB_OUTPUT
            echo "CHANGELOG_CONTENT=版本 ${{ github.ref_name }} 发布" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.check_changelog.outputs.CHANGELOG_CONTENT }}
          draft: false
          prerelease: false
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prerelease:
    needs: [check-conditions, build]
    if: needs.check-conditions.outputs.is_prerelease == 'true'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist
          
      - name: Get tag name
        id: get_tag
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/")) {
            echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_OUTPUT
          } else {
            echo "TAG_NAME=${{ needs.build.outputs.tag_name }}" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Prepare pre-release notes
        id: prerelease_notes
        run: |
          $TAG_NAME = "${{ steps.get_tag.outputs.TAG_NAME }}"
          $PRE_NOTES="## 预发布版本 $TAG_NAME

          这是一个预发布版本，可能包含实验性功能和已知问题。请不要用作生产环境。
          
          "
          
          if (Test-Path "CHANGELOG.md") {
            $CHANGELOG = Get-Content -Path "CHANGELOG.md" -Raw
            $PRE_NOTES = $PRE_NOTES + $CHANGELOG
          }
          
          echo "NOTES<<EOF" >> $env:GITHUB_OUTPUT
          echo "$PRE_NOTES" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          name: Pre-release ${{ steps.get_tag.outputs.TAG_NAME }}
          body: ${{ steps.prerelease_notes.outputs.NOTES }}
          draft: false
          prerelease: true
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}